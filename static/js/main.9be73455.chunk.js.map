{"version":3,"sources":["components/SearchBox.jsx","components/Scroll.jsx","components/Card.jsx","components/CardList.jsx","components/Header.jsx","containers/App.jsx","redux/actions.js","redux/constants.js","serviceWorker.js","redux/searchReducer.js","redux/roboReducer.js","redux/rootReducer.js","index.js"],"names":["SearchBox","onSearchInputChange","console","log","className","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Card","name","email","id","alt","src","CardList","robos","map","robo","key","Header","Component","MessageLazy","React","lazy","App","state","this","getRobos","searchField","onSearchChanged","isPending","error","filteredRobos","filter","r","toLowerCase","includes","fallback","connect","search","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9be73455.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({ onSearchInputChange }) => {\n  console.log(\"Render SearchBox\");\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        type=\"search\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        placeholder=\"Search Robos\"\n        onChange={onSearchInputChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <h2>{email}</h2>\n        <h2>Contact</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robos }) => {\n  console.log(\"Render Card List\");\n  return (\n    <div>\n      {robos.map((robo) => {\n        return (\n          <Card\n            key={robo.id}\n            id={robo.id}\n            name={robo.name}\n            email={robo.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    return <h1 className=\"f1\">ROBO FRIENDS</h1>;\n  }\n}\n\nexport default Header;\n","import React, { Component, Suspense } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport CardList from \"../components/CardList\";\nimport { connect } from \"react-redux\";\nimport { searchChanged, getRobos } from \"../redux/actions\";\nimport Header from \"../components/Header\";\n// import AsyncComponent from \"../components/AsyncComponent\";\n\nconst MessageLazy = React.lazy(() => import(\"../components/Message\"));\nclass App extends Component {\n  state = {\n    //robos: [],\n  };\n\n  componentDidMount() {\n    this.props.getRobos();\n  }\n\n  // onInputChange = (event) => {\n  //   this.setState({ searchInput: event.target.value });\n  // };\n\n  render() {\n    // const { robos } = this.state;\n    const {\n      searchField,\n      onSearchChanged,\n      robos,\n      isPending,\n      error,\n    } = this.props;\n    const filteredRobos = robos.filter((r) =>\n      r.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    if (error) {\n      return <div> Something went wrong.. </div>;\n    }\n\n    return isPending ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox onSearchInputChange={onSearchChanged} />\n        <Scroll>\n          <CardList robos={filteredRobos} />\n        </Scroll>\n        <Suspense fallback={<div> Loading...</div>}>\n          <MessageLazy />\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.search.searchField,\n    robos: state.robo.robos,\n    isPending: state.robo.isPending,\n    error: state.robo.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChanged: (event) => dispatch(searchChanged(event.target.value)),\n    getRobos: () => dispatch(getRobos()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  SEARCH_CHANGED,\n  GET_ROBOS_PENDING,\n  GET_ROBOS_SUCCESS,\n  GET_ROBOS_REJECT,\n} from \"./constants\";\n\nexport const searchChanged = (input) => {\n  return {\n    type: SEARCH_CHANGED,\n    payload: input,\n  };\n};\n\nexport const getRobos = () => (dispatch) => {\n  dispatch({ type: GET_ROBOS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((resp) => resp.json())\n    .then((data) => {\n      dispatch({ type: GET_ROBOS_SUCCESS, payload: data });\n    })\n    .catch((error) =>\n      dispatch({\n        type: GET_ROBOS_REJECT,\n        payload: error,\n      })\n    );\n};\n","export const SEARCH_CHANGED = \"SEARCH_CHANGED\";\n\nexport const GET_ROBOS_PENDING = \"GET_ROBOS_PENDING\";\nexport const GET_ROBOS_SUCCESS = \"GET_ROBOS_SUCCESS\";\nexport const GET_ROBOS_REJECT = \"GET_ROBOS_REJECT\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SEARCH_CHANGED } from \"./constants\";\n\nconst initialState = {\n  searchField: \"\",\n};\n\nexport function SearchReducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case SEARCH_CHANGED:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n","import {\n  GET_ROBOS_PENDING,\n  GET_ROBOS_SUCCESS,\n  GET_ROBOS_REJECT,\n} from \"./constants\";\n\nconst initialState = {\n  robos: [],\n  isPending: false,\n  error: \"\",\n};\n\nexport function RoboReducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case GET_ROBOS_PENDING:\n      return { ...state, isPending: true };\n    case GET_ROBOS_SUCCESS:\n      return { ...state, robos: action.payload, isPending: false };\n    case GET_ROBOS_REJECT:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { SearchReducer } from \"./searchReducer\";\nimport { RoboReducer } from \"./roboReducer\";\n\nconst rootReducer = combineReducers({\n  search: SearchReducer,\n  robo: RoboReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./redux/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}